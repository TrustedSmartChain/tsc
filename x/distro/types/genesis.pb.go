// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: distro/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the module genesis state
type GenesisState struct {
	// Params defines all the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f02fec9499f3ab0, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Params defines the set of module parameters.
type Params struct {
	MintingAddress        string `protobuf:"bytes,1,opt,name=minting_address,json=mintingAddress,proto3" json:"minting_address,omitempty"`
	ReceivingAddress      string `protobuf:"bytes,2,opt,name=receiving_address,json=receivingAddress,proto3" json:"receiving_address,omitempty"`
	Denom                 string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	MaxSupply             string `protobuf:"bytes,4,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`
	DistributionStartDate string `protobuf:"bytes,5,opt,name=distribution_start_date,json=distributionStartDate,proto3" json:"distribution_start_date,omitempty"`
	MonthsInHalvingPeriod uint64 `protobuf:"varint,6,opt,name=months_in_halving_period,json=monthsInHalvingPeriod,proto3" json:"months_in_halving_period,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f02fec9499f3ab0, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintingAddress() string {
	if m != nil {
		return m.MintingAddress
	}
	return ""
}

func (m *Params) GetReceivingAddress() string {
	if m != nil {
		return m.ReceivingAddress
	}
	return ""
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Params) GetMaxSupply() string {
	if m != nil {
		return m.MaxSupply
	}
	return ""
}

func (m *Params) GetDistributionStartDate() string {
	if m != nil {
		return m.DistributionStartDate
	}
	return ""
}

func (m *Params) GetMonthsInHalvingPeriod() uint64 {
	if m != nil {
		return m.MonthsInHalvingPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "distro.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "distro.v1.Params")
}

func init() { proto.RegisterFile("distro/v1/genesis.proto", fileDescriptor_8f02fec9499f3ab0) }

var fileDescriptor_8f02fec9499f3ab0 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xc1, 0x6a, 0xe2, 0x40,
	0x18, 0xc7, 0x13, 0x57, 0x03, 0xce, 0x2e, 0xbb, 0x6b, 0x56, 0xd9, 0x20, 0xbb, 0x51, 0xbc, 0xac,
	0xec, 0x42, 0x06, 0xb7, 0xd0, 0x42, 0x2f, 0xa5, 0xb6, 0xd0, 0x7a, 0x13, 0xd3, 0x53, 0x2f, 0x61,
	0x34, 0x43, 0x32, 0xe0, 0xcc, 0x84, 0x99, 0x89, 0xe8, 0x2b, 0xf4, 0xd4, 0x47, 0x28, 0x7d, 0x82,
	0x3e, 0x86, 0x47, 0x8f, 0x3d, 0x95, 0xa2, 0x87, 0xf6, 0x31, 0x8a, 0x33, 0xa9, 0xd8, 0x4b, 0xc8,
	0xfc, 0x7f, 0x3f, 0xfe, 0xcc, 0x7c, 0x1f, 0xf8, 0x19, 0x13, 0xa9, 0x04, 0x87, 0xb3, 0x1e, 0x4c,
	0x30, 0xc3, 0x92, 0xc8, 0x20, 0x13, 0x5c, 0x71, 0xb7, 0x6a, 0x40, 0x30, 0xeb, 0x35, 0xeb, 0x09,
	0x4f, 0xb8, 0x4e, 0xe1, 0xf6, 0xcf, 0x08, 0xcd, 0x1a, 0xa2, 0x84, 0x71, 0xa8, 0xbf, 0x26, 0xea,
	0x9c, 0x80, 0x2f, 0x17, 0xa6, 0x24, 0x54, 0x48, 0x61, 0x17, 0x02, 0x27, 0x43, 0x02, 0x51, 0xe9,
	0xd9, 0x6d, 0xbb, 0xfb, 0xf9, 0x7f, 0x2d, 0xd8, 0x95, 0x06, 0x43, 0x0d, 0xfa, 0xe5, 0xe5, 0x53,
	0xcb, 0x1a, 0x15, 0x5a, 0xe7, 0xbe, 0x04, 0x1c, 0x03, 0xdc, 0x3f, 0xe0, 0x1b, 0x25, 0x4c, 0x11,
	0x96, 0x44, 0x28, 0x8e, 0x05, 0x96, 0xa6, 0xa4, 0x3a, 0xfa, 0x5a, 0xc4, 0xa7, 0x26, 0x75, 0xff,
	0x81, 0x9a, 0xc0, 0x13, 0x4c, 0x66, 0xfb, 0x6a, 0x49, 0xab, 0xdf, 0x77, 0xe0, 0x5d, 0xae, 0x83,
	0x4a, 0x8c, 0x19, 0xa7, 0xde, 0x27, 0x2d, 0x98, 0x83, 0xfb, 0x1b, 0x00, 0x8a, 0xe6, 0x91, 0xcc,
	0xb3, 0x6c, 0xba, 0xf0, 0xca, 0x1a, 0x55, 0x29, 0x9a, 0x87, 0x3a, 0x70, 0x0f, 0x8b, 0x29, 0x91,
	0x71, 0xae, 0x08, 0x67, 0x91, 0x54, 0x48, 0xa8, 0x28, 0x46, 0x0a, 0x7b, 0x15, 0xed, 0x36, 0xf6,
	0x71, 0xb8, 0xa5, 0xe7, 0xdb, 0xe7, 0x1f, 0x01, 0x8f, 0x72, 0xa6, 0x52, 0x19, 0x11, 0x16, 0xa5,
	0x68, 0xaa, 0x6f, 0x98, 0x61, 0x41, 0x78, 0xec, 0x39, 0x6d, 0xbb, 0x5b, 0x1e, 0x35, 0x0c, 0x1f,
	0xb0, 0x4b, 0x43, 0x87, 0x1a, 0x1e, 0xff, 0x7a, 0xbd, 0x6b, 0xd9, 0x37, 0x2f, 0x0f, 0x7f, 0x7f,
	0x28, 0x39, 0x81, 0x73, 0x58, 0xec, 0xc8, 0x0c, 0xa9, 0x3f, 0x58, 0xae, 0x7d, 0x7b, 0xb5, 0xf6,
	0xed, 0xe7, 0xb5, 0x6f, 0xdf, 0x6e, 0x7c, 0x6b, 0xb5, 0xf1, 0xad, 0xc7, 0x8d, 0x6f, 0x5d, 0xc3,
	0x84, 0xa8, 0x34, 0x1f, 0x07, 0x13, 0x4e, 0xe1, 0x95, 0xc8, 0xa5, 0xc2, 0x71, 0x48, 0x91, 0x50,
	0x67, 0x29, 0x22, 0x0c, 0x7e, 0xe8, 0x52, 0x8b, 0x0c, 0xcb, 0xb1, 0xa3, 0xf7, 0x76, 0xf0, 0x16,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x22, 0xd6, 0x36, 0x06, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MintingAddress != that1.MintingAddress {
		return false
	}
	if this.ReceivingAddress != that1.ReceivingAddress {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.MaxSupply != that1.MaxSupply {
		return false
	}
	if this.DistributionStartDate != that1.DistributionStartDate {
		return false
	}
	if this.MonthsInHalvingPeriod != that1.MonthsInHalvingPeriod {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MonthsInHalvingPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.MonthsInHalvingPeriod))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DistributionStartDate) > 0 {
		i -= len(m.DistributionStartDate)
		copy(dAtA[i:], m.DistributionStartDate)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DistributionStartDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MaxSupply) > 0 {
		i -= len(m.MaxSupply)
		copy(dAtA[i:], m.MaxSupply)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MaxSupply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReceivingAddress) > 0 {
		i -= len(m.ReceivingAddress)
		copy(dAtA[i:], m.ReceivingAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ReceivingAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MintingAddress) > 0 {
		i -= len(m.MintingAddress)
		copy(dAtA[i:], m.MintingAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.MintingAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintingAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ReceivingAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.MaxSupply)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.DistributionStartDate)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.MonthsInHalvingPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.MonthsInHalvingPeriod))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivingAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceivingAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionStartDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionStartDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthsInHalvingPeriod", wireType)
			}
			m.MonthsInHalvingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthsInHalvingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
